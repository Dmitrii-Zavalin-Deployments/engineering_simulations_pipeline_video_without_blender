name: Fluid Simulation Pipeline (Without Blender)  # Workflow name

on:
  push:  # ‚úÖ Runs on every commit to any branch
  workflow_dispatch:  # ‚úÖ Allows manual triggering too

jobs:
  fluid-simulation:
    runs-on: ubuntu-latest
    steps:

      # 1Ô∏è‚É£ Step: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Step: Set Python to Version 3.9 (Fixes PySPH Issues)
      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 3Ô∏è‚É£ Step: Install System Dependencies
      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip libegl1 ffmpeg libopenvdb-dev libtbb-dev

      # 4Ô∏è‚É£ Step: Setup Python Virtual Environment
      - name: Setup Python Virtual Environment
        run: |
          python3 -m venv venv
          echo "source venv/bin/activate" >> ~/.bashrc
          source ~/.bashrc
          echo "‚úÖ Virtual environment setup complete."

      # 5Ô∏è‚É£ Step: Set Compiler Flags to Fix PySPH Issues
      - name: Set Compiler Flags
        run: |
          echo 'export CXXFLAGS="-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION"' >> ~/.bashrc
          source ~/.bashrc

      # 6Ô∏è‚É£ Step: Upgrade NumPy & Cython Before Installing PySPH
      - name: Upgrade NumPy & Cython
        run: |
          source ~/.bashrc
          pip install --upgrade numpy cython

      # 7Ô∏è‚É£ Step: Install Python Dependencies (Updated for PySPH)
      - name: Install Python Dependencies
        run: |
          source ~/.bashrc
          pip install -U pip setuptools wheel
          pip install Cython==0.29.36 compyle mako numpy pytools
          pip install pysph  # Explicitly install PySPH after dependencies
          pip install -r requirements.txt
          echo "‚úÖ Python dependencies installed."

      # üîç Debug - Verify Installed Python Packages
      - name: Debug - Verify Installed Python Packages
        run: |
          source ~/.bashrc
          python -c "import pysph; print('‚úÖ PySPH is installed successfully!')" || echo "‚ùå ERROR: PySPH installation failed!"

      # 8Ô∏è‚É£ Step: Ensure `testing-input-output/` Directory Exists
      - name: Create testing-input-output Directory
        run: |
          mkdir -p data/testing-input-output

      # 9Ô∏è‚É£ Step: Verify Fluid Simulation Script Exists
      - name: Verify Fluid Simulation Script Exists
        run: |
          if [ -f src/fluid_simulation.py ]; then
            echo "‚úÖ fluid_simulation.py found. Proceeding..."
          else
            echo "‚ùå ERROR: fluid_simulation.py not found!"
            exit 1
          fi

      # üîü Step: Run Fluid Simulation
      - name: Run Fluid Simulation
        run: |
          source ~/.bashrc
          python --version  # ‚úÖ Debugging step: Print Python version
          python3 src/fluid_simulation.py

      # 1Ô∏è‚É£1Ô∏è‚É£ Step: Verify Simulation Output File
      - name: Verify Simulation Output File
        run: |
          if [ -f data/testing-input-output/fluid_dynamics_animation.json ]; then
            echo "‚úÖ Simulation completed‚Äîfluid_dynamics_animation.json generated."
          else
            echo "‚ùå ERROR: No `fluid_dynamics_animation.json` file detected!"
            exit 1
          fi

      # 1Ô∏è‚É£2Ô∏è‚É£ Step: Render Fluid Motion Frames
      - name: Render Fluid Motion Frames
        run: |
          source ~/.bashrc
          python3 src/render_frames.py

      # 1Ô∏è‚É£3Ô∏è‚É£ Step: Verify Generated Frames
      - name: Verify Generated Frames
        run: |
          if ls data/testing-input-output/frame_*.png 1> /dev/null 2>&1; then
            echo "‚úÖ Animation frames generated successfully."
          else
            echo "‚ùå ERROR: No rendered frames found!"
            exit 1
          fi

      # 1Ô∏è‚É£4Ô∏è‚É£ Step: Create Video from Rendered Frames
      - name: Create Video
        run: |
          chmod +x src/create_video.sh
          ./src/create_video.sh
          mv ./RenderedOutput/video.mp4 ./data/testing-input-output/video.mp4

      # 1Ô∏è‚É£5Ô∏è‚É£ Step: Verify Generated Video
      - name: Verify Generated Video
        run: |
          if [ -f data/testing-input-output/video.mp4 ]; then
            echo "‚úÖ Final video generated successfully."
          else
            echo "‚ùå ERROR: No video.mp4 file detected!"
            exit 1
          fi

      # 1Ô∏è‚É£6Ô∏è‚É£ Step: Run Unit & Integration Tests for Video Validation
      - name: Run Unit Tests
        run: |
          source ~/.bashrc
          pytest tests/test_input_validation.py --verbose

      - name: Run Output Validation Tests
        run: |
          source ~/.bashrc
          pytest tests/test_output_validation.py --verbose

      - name: Run Fluid Simulation Tests
        run: |
          source ~/.bashrc
          pytest tests/test_simulation_process.py --verbose

      - name: Run Video Rendering Tests
        run: |
          source ~/.bashrc
          pytest tests/test_video_generation.py --verbose

      - name: Run Performance Tests
        run: |
          source ~/.bashrc
          pytest tests/test_performance.py --verbose

      - name: Run Optical Flow Analysis
        run: |
          source ~/.bashrc
          pytest tests/test_optical_flow.py --verbose

      - name: Run Multi-Directional Motion Tests
        run: |
          source ~/.bashrc
          pytest tests/test_multi_directional_motion.py --verbose

      - name: Run SSIM & PSNR Validation Tests
        run: |
          source ~/.bashrc
          pytest tests/test_ssim_validation.py --verbose

      # 1Ô∏è‚É£7Ô∏è‚É£ Step: Commit and Push `testing-input-output/` Folder
      - name: Commit and Push Simulation Output
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"

          git add data/testing-input-output/
          git status
          git diff --cached --quiet && echo "‚úÖ No changes to commit!" || git commit -m "Auto-update: Added fluid_dynamics_animation.json and video"
          git push origin HEAD



